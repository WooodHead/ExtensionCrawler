#!/usr/bin/env python3
#
# Copyright (C) 2016,2017 The University of Sheffield, UK
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import glob
import re
import requests
from time import sleep
from random import randint
from datetime import datetime, timezone
from ExtensionCrawler.discover import *
from ExtensionCrawler.archive import *
from ExtensionCrawler.util import *
from ExtensionCrawler.discover import *
import dateutil
import dateutil.parser
import time
import datetime
import getopt


def log_summary(verbose, res, runtime=0):
    total = len(res)
    success = len(list(filter(lambda x: x.is_ok(), res)))
    not_authorized = len(list(filter(lambda x: x.not_authorized(), res)))
    has_exception = len(list(filter(lambda x: x.has_exception(), res)))
    raised_ddos = len(list(filter(lambda x: x.raised_google_ddos(), res)))
    not_in_store = len(list(filter(lambda x: x.not_in_store(), res)))
    not_modified = len(list(filter(lambda x: x.not_modified(), res)))

    log(verbose, "\n")
    log(verbose, "Summary:\n")
    log(verbose, "    Updated {} out of {} extensions successfully\n".format(
        str(success), str(total)))
    log(verbose, "    Not authorized:          {:8d}\n".format(not_authorized))
    log(verbose, "    Raised Google DDOS:      {:8d}\n".format(raised_ddos))
    log(verbose, "    Not modified archives:   {:8d}\n".format(not_modified))
    log(verbose, "    Extensions not in store: {:8d}\n".format(not_in_store))
    log(verbose, "    Unknown exception:       {:8d}\n".format(has_exception))
    log(verbose,
        "    Total runtime:            {}\n".format(
            str(datetime.timedelta(seconds=int(runtime)))))


def help():
    print("crawler [OPTION]")
    print("    -h        print this help text")
    print("    -s        silent (no log messages)")
    print("    -d        disover new extensions")
    print("    -a=<DIR>  archive directory")


def main(argv):
    basedir = "archive"
    verbose = True
    discover = False
    try:
        opts, args = getopt.getopt(argv, "hsda:", ["archive="])
    except getopt.GetoptError:
        help()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            help()
            sys.exit()
        elif opt in ("-a", "--archive"):
            basedir = arg
        elif opt == '-s':
            verbose = False
        elif opt == '-d':
            discover = True

    archive_dir = os.path.join(basedir, "extensions")
    conf_dir = os.path.join(basedir, "conf")
    start_time = time.time()

    log(verbose, "Configuration:\n")
    log(verbose, "  Base dir:          {}\n".format(basedir))
    log(verbose, "    Archive dir:     {}\n".format(archive_dir))
    log(verbose, "    Conf. dir:       {}\n".format(conf_dir))
    log(verbose, "  Discover new ext.: {}\n".format(discover))
    log(verbose, "\n")

    forum_ext_ids = get_forum_ext_ids(conf_dir, verbose)
    existing_ids = get_existing_ids(archive_dir, verbose)
    known_ids = list(set(existing_ids) | set(forum_ext_ids))
    new_ids = []
    if discover:
        new_ids = get_new_ids(verbose, known_ids)

    res = update_extensions(archive_dir, verbose, forum_ext_ids, known_ids,
                            new_ids)
    end_time = time.time()
    log_summary(verbose, res, end_time - start_time)


if __name__ == "__main__":
    main(sys.argv[1:])
