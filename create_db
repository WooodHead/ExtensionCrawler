#!/usr/bin/env python3
#
# Copyright (C) 2016,2017 The University of Sheffield, UK
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import getopt
import os
import sys
import glob
import tarfile
import tempfile
import traceback

from ExtensionCrawler.sqlite import *
from ExtensionCrawler.config import *


def help():
    print("create_db [OPTION]")
    print("    -h           print this help text")
    print("    -a=<DIR>     archive directory")
    print("    -p=<PREFIX>  three-letter-prefix")


def main(argv):
    basedir = "archive"
    prefix = ""
    try:
        opts, args = getopt.getopt(argv, "ha:p:", ["archive=", "prefix="])
    except getopt.GetoptError:
        help()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            help()
            sys.exit()
        elif opt in ("-a", "--archive"):
            basedir = arg
        elif opt in ("-p", "--prefix"):
            prefix = arg

    archivedir = os.path.join(basedir, "data")
    threeletterdirs = glob.glob(os.path.join(archivedir, prefix + "*"))
    for threeletterdir in threeletterdirs:
        for ext_id in set([d[:32] for d in os.listdir(threeletterdir)]):
            sys.stdout.write("Processing {} ...\n".format(ext_id))
            sys.stdout.flush()
            tarpath = archive_file(archivedir, ext_id)
            dbpath = db_file(archivedir, ext_id)
            if os.path.exists(dbpath):
                os.remove(dbpath)
            with tempfile.TemporaryDirectory() as tmpdir:
                with tarfile.open(tarpath) as t:
                    t.extractall(tmpdir)
                    iddir = os.path.join(tmpdir, ext_id)

                    for date in sorted(os.listdir(iddir)):
                        try:
                            sys.stdout.write(
                                update_sqlite_incremental(
                                    archivedir, iddir, ext_id, date, True, ""))
                            sys.stdout.flush()
                        except Exception as e:
                            sys.stdout.write(
                                "Exception when handling {} on {}:\n".format(
                                    ext_id, date))
                            sys.stdout.write(traceback.format_exc())
                            sys.stdout.flush()

            sys.stdout.write("\n")
            sys.stdout.flush()


if __name__ == "__main__":
    main(sys.argv[1:])
